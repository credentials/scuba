<?xml version="1.0" encoding="ISO-8859-1"?>

<project name="scuba_util" default="all" basedir=".">

	<description>
		Builds scuba_util jar
	</description>

	<!-- Global properties for this build -->
	<property name="src" location="src" />
	<property name="build" location="bin" />
	<property name="dist" location="dist" />

	<property name="app_name" value="scuba_util" />
	<property name="app_version" value="0.0.1" />
	<property name="app_title" value="${app_name} ${app_version}" />
	
	<target name="all" description="Build everything" depends="init, dist, doc">
	</target>

	<target name="init" depends="check_conditional_properties" description="Initializes some variables">
		<!-- Create the time stamp -->
		<tstamp />

		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />

		<!-- Create the distribution directory structure -->
		<mkdir dir="${dist}" />
	</target>
	
	<target name="compile" depends="init" description="Compiles the source ">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" includes="**/*.java" destdir="${build}" />
	</target>

	<target name="dist" depends="compile" description="Generates the distribution .jar file">
		<!-- Create a new header for README containing version number -->
		<concat append="false" force="true" destfile="${dist}/README">
			<header filtering="no" trimleading="yes">${app_title}-${DSTAMP}

			</header>
			<fileset dir="." includes="README" />
		</concat>

		<!-- Copy license, etc. -->
		<copy todir="${dist}">
			<fileset dir="." includes="LICENSE" />
		</copy>

		<!-- Create the distribution jar file -->
		<jar jarfile="${dist}/${app_name}-${app_version}.jar">
			<manifest>
				<attribute name="Built-By" value="${user.name} on ${os.name} ${os.arch}" />
				<attribute name="Built-Date" value="${TODAY}" />
				<attribute name="Implementation-Vendor" value="${author_name}"/>
				<attribute name="Implementation-Title" value="${app_name}"/>
				<attribute name="Implementation-Version" value="${app_version}-${DSTAMP}"/>
			</manifest>
			<fileset dir="${build}/" includes="**/*.class" />
			<fileset dir="${dist}" includes="README,LICENSE" />
		</jar>	
	</target>

	<target name="clean" description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete failonerror="false" dir="${build}" />
		<delete failonerror="false" dir="${dist}" />
		<delete failonerror="false" file="jmrtd_installer.jar" />
		<delete failonerror="false" file="jmrtd_installer.exe" />
		<delete failonerror="false" file="jmrtd_installer-${app_version}.jar" />
		<delete failonerror="false" file="jmrtd_installer-${app_version}.exe" />
	</target>

	<target name="doc" description="Generates API docs" if="build_java_doc">
		<javadoc destdir="apidocs"
				package="false"
				doctitle="${app_title}"
				windowtitle="${app_title}"
				header="${app_title}"
				packagenames="net.sourceforge.scuba.smartcards">
			<link href="http://java.sun.com/javase/6/docs/api" />
			<link href="http://java.sun.com/javase/6/docs/jre/api/security/smartcardio/spec/" />
			<link href="http://www.bouncycastle.org/docs/docs1.6" />
			<!-- link href="http://java.sun.com/products/javacard/htmldoc" / -->
			<!-- link href="http://www.cs.ru.nl/~woj/jcopapi/" / -->
			<sourcepath path="src;${sos-shared-src}" />
			<package name="net.sourceforge.scuba.smartcards" />
			<package name="net.sourceforge.scuba.smartcards.data" />
			<package name="net.sourceforge.scuba.tlv" />
		</javadoc>
	
		<zip destfile="${app_name}-doc-${app_version}-${DSTAMP}.zip" basedir="apidocs" />
	</target>
	
	<!-- Conditional stuff is set below -->

	<target name="check_conditional_properties" description="Sets some properties depending on build platform">
		<available file="${acrprovider_build}" property="is_acr_available" />
		<available file="${crefprovider_build}" property="is_cref_available" />
		<available file="${jcopprovider_build}" property="is_jcop_available" />
		<available classname="com.izforge.izpack.ant.IzPackTask" classpath="${izpack-standalone-compiler}" property="is_izpack_available" />
		<available classname="net.charabia.jsmoothgen.ant.JSmoothGen" classpath="${jsmooth_dir}/lib/jsmoothgen-ant.jar" property="is_jsmooth_available" />
		<available classname="net.sourceforge.retroweaver.ant.RetroWeaverTask" classpath="${retroweaver_dir}/${retroweaver_jar}" property="is_retroweaver_available" />
		<condition property="is_os_windows">
	  		<or>
	  			<equals arg1="${os.name}" arg2="Windows 95" />
	  			<equals arg1="${os.name}" arg2="Windows 98" />
	  			<equals arg1="${os.name}" arg2="Windows 2000" />
	  			<equals arg1="${os.name}" arg2="Windows XP" />
	  			<equals arg1="${os.name}" arg2="Windows NT" />
	  			<equals arg1="${os.name}" arg2="Windows Vista" />
			</or>
		</condition>
		<condition property="is_os_unix">
			<or>
				<equals arg1="${os.name}" arg2="AIX" />
				<equals arg1="${os.name}" arg2="Digital Unix" />
				<equals arg1="${os.name}" arg2="FreeBSD" />
				<equals arg1="${os.name}" arg2="HP UX" />
				<equals arg1="${os.name}" arg2="Irix" />
				<equals arg1="${os.name}" arg2="Linux" />
				<equals arg1="${os.name}" arg2="Solaris" />
			</or>
		</condition>
		<condition property="is_os_mac">
			<or>
				<equals arg1="${os.name}" arg2="Mac OS" />
				<equals arg1="${os.name}" arg2="Mac OS X" />
			</or>
		</condition>
	</target>

</project>
